import express from "express";
import session from "express-session";
import fetch from "node-fetch";
import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import bodyParser from "body-parser";
import cookieParser from "cookie-parser";
import http from "http";
import dotenv from "dotenv";
import { logToFile } from '../shared/logger.mjs';
import { normalizeUrl, safeStringify } from '../shared/utils.mjs';
import { decryptData } from '../shared/cryptoUtils.mjs';
import { compressData, decompressData } from '../shared/compressionUtils.mjs';
import { addTaskToQueue } from './taskQueue.mjs';


export {
    express,
    session,
    puppeteer,
    StealthPlugin,
    bodyParser,
    cookieParser,
    http,
};


// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const PORT = process.env.PORT || 4000; // –ü–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

puppeteer.use(StealthPlugin()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≥–∏–Ω Stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤

const app = express();
app.use(bodyParser.json()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

app.use(cookieParser(process.env.SECRET_KEY)); // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º cookieParser —Å —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫—É–∫–æ–≤

app.set("trust proxy", 1); // –î–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP –∫–ª–∏–µ–Ω—Ç–∞


const server = http.createServer(app);
server.keepAliveTimeout = 120000; // –¢–∞–π–º–∞—É—Ç Keep-Alive —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
server.headersTimeout = 120000; // –¢–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
server.maxConnections = 100000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–µ—Ä—É

let sessionId;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ X-Session-ID
app.use(async (req, res, next) => {
    req.sessionID = req.get("X-Session-ID") || req.cookies["X-Session-ID"];

    if (!req.sessionID) {
        await logToFile("‚ùå –ù–µ—Ç X-Session-ID, –Ω–æ –º—ã –¥–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ Traefik.");
        return res.status(400).send("Missing X-Session-ID");
    }

    await logToFile(`üîÑ Using session ID from Traefik: ${req.sessionID}`);
    sessionId = req.sessionID;
    next();
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.
 * @route GET /health
 * @param {Request} req - –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Response} res - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–≤–µ—Ç–∞.
 * @returns {void}
 */
app.get('/health', async (req, res) => {
    await logToFile(`health - OK`);
    res.status(200).send('OK');
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏–¥.
 * @route POST /send-lead-message
 * @param {Request} req - –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Response} res - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–≤–µ—Ç–∞.
 * @returns {Promise<Response>} - –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏.
 */
app.post('/send-lead-message', async (req, res) => {
    const startTime = Date.now();

    if (!req.body.data) {
        return res.status(400).json({ error: 'Missing data' });
    }

    const decryptedData = decryptData(req.body.data, process.env.ENCRYPTION_KEY);
    await logToFile(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.`);

    if (!decryptedData) {
        return res.status(400).json({ error: 'Error decryption' });
    }
    const { account_id, base_url, access_token, refresh_token, lead_id, message_text, expiry } = decryptedData;
    await logToFile(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.`);
    if (!account_id || !base_url || !access_token || !refresh_token || !lead_id || !message_text || !expiry) {
        return res.status(400).json({ error: 'Missing required parameters' });
    }
    await logToFile(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ.`);

    const task = { account_id, base_url, access_token, refresh_token, lead_id, message_text, expiry };

    const workerId = await addTaskToQueue(sessionId, task);
    return res.status(200).json({ status: 'queued', sessionId, workerId });
});

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Puppeteer-—Å–µ—Ä–≤–∏—Å–∞.
 * @constant {number} PORT - –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞.
 * @returns {Promise<void>}
 */
app.listen(PORT, '0.0.0.0', async () => {
    await logToFile(`Puppeteer service running on port ${PORT}`)
});

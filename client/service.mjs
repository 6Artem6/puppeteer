import express from "express";
import session from "express-session";
import fetch from "node-fetch";
import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import bodyParser from "body-parser";
import cookieParser from "cookie-parser";
import fs from "fs-extra";
import path from "path";
import http from "http";
import crypto from "crypto";
import dotenv from "dotenv";
import { logToFile } from './logger.mjs';
import { normalizeUrl, safeStringify } from './utils.mjs';
import { decryptData } from './cryptoUtils.mjs';
import { compressData, decompressData } from './compressionUtils.mjs';
import {
    getContext, saveContext, loadContext, updateContext, clearContext,
    saveCookies, loadCookies, redisClient, contextStore, launchBrowser,
    getBrowser, setBrowser, getUsername, saveUsername
} from './contextManager.mjs';


export {
    express,
    session,
    puppeteer,
    StealthPlugin,
    bodyParser,
    cookieParser,
    fs,
    path,
    http,
    crypto,
};


// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const PORT = process.env.PORT || 4000; // –ü–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

puppeteer.use(StealthPlugin()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≥–∏–Ω Stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤

const app = express();
app.use(bodyParser.json()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

app.use(cookieParser(process.env.SECRET_KEY)); // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º cookieParser —Å —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫—É–∫–æ–≤

app.set("trust proxy", 1); // –î–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP –∫–ª–∏–µ–Ω—Ç–∞

const MAX_CONTEXTS = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const MAX_REQUEST_COUNT = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const MAX_PAGES_PER_ACCOUNT = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç

const server = http.createServer(app);
server.keepAliveTimeout = 120000; // –¢–∞–π–º–∞—É—Ç Keep-Alive —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
server.headersTimeout = 120000; // –¢–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
server.maxConnections = 100000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–µ—Ä—É

let sessionId;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ X-Session-ID
app.use(async (req, res, next) => {
    req.sessionID = req.get("X-Session-ID") || req.cookies["X-Session-ID"];

    if (!req.sessionID) {
        await logToFile("‚ùå –ù–µ—Ç X-Session-ID, –Ω–æ –º—ã –¥–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ Traefik.");
        return res.status(400).send("Missing X-Session-ID");
    }

    await logToFile(`üîÑ Using session ID from Traefik: ${req.sessionID}`);
    sessionId = req.sessionID;
    next();
});

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏–¥.
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
 * @param {string} params.account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} params.base_url - –ë–∞–∑–æ–≤—ã–π URL.
 * @param {string} params.access_token - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
 * @param {string} params.refresh_token - –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @param {string} params.lead_id - ID –ª–∏–¥–∞.
 * @param {string} params.message_text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {number} params.expiry - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
 * @returns {Promise<{ status: number, message: Object }>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏.
 */
async function sendLeadMessage(params) {
    const { account_id, base_url, access_token, refresh_token, lead_id, message_text, expiry } = params;

    let { page, isNew } = await getPage(base_url, account_id, lead_id, expiry);

    if (isNew) {
        await logToFile(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è ${account_id}`);
        await page.goto(base_url, { waitUntil: 'networkidle2', timeout: 120000 });
        await logToFile(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${base_url} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    } else {
        await logToFile(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.url()}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (!(await handleAuthorization(page, account_id, access_token, refresh_token, expiry))) {
        return { status: 401, message: { status: 'failed_with_token' } };
    }

    // –ñ–¥—ë–º, –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–∂–µ –∏–¥—ë—Ç —Ä–∞–±–æ—Ç–∞
    const lockKey = `${account_id}:${lead_id}`;
    while (contextStore[account_id].pagesLocks.get(lockKey)) {
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç (2 –ø–æ–ø—ã—Ç–∫–∏)
    for (let attempt = 1; attempt <= 2; attempt++) {
        if (isNew) {
            await navigateToLead(page, account_id, lead_id, base_url);
        }

        if (await navigateToChat(page) && await selectRecipient(page, account_id, lead_id)) {
            break;
        }

        if (attempt === 2) {
            return { status: 500, message: { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è' } };
        }

        await logToFile(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        await page.reload({ waitUntil: 'networkidle2' });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!(await sendMessage(page, message_text))) {
        return { status: 500, message: { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' } };
    }

    await updateRequestCount(account_id);

    return { status: 200, message: { status: 'message_sent' } };
}

/**
 * –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 * @param {() => Promise<any>} fn - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏.
 * @param {number} [maxRetries=5] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
 * @param {number} [delay=1000] - –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å).
 * @returns {Promise<any>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è `fn`.
 * @throws {Error} - –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
 */
async function withRetries(fn, maxRetries = 5, delay = 1000) {
    let attempts = 0;
    while (attempts < maxRetries) {
        try {
            return await fn();
        } catch (err) {
            attempts++;
            await logToFile(`[ERROR] –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxRetries}): ${err.message}`);
            await logToFile(`[ERROR] Stack Trace: ${err.stack}`);
            await logToFile(`[ERROR] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: ${safeStringify(err)}`);
            if (attempts >= maxRetries) throw err;
            await new Promise((resolve) => setTimeout(resolve, delay * attempts)); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }
    }
}

/**
 * –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –∏ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç callback.
 * @param {string|number} account_id
 * @param {string|number} lead_id
 * @param {Function} callback
 * @returns {Promise<any>}
 */
async function withPageLock(account_id, lead_id, callback) {
    const key = `${account_id}:${lead_id}`;
    const context = await getContext(account_id);

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ pagesQueue —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ Promise
    if (!context.pagesQueue.has(key) || !(context.pagesQueue.get(key) instanceof Promise)) {
        context.pagesQueue.set(key, Promise.resolve());
    }

    const queue = context.pagesQueue.get(key);
    const task = queue.then(async () => {
        const now = Date.now();
        const lockTimestamp = context.pagesBusy.get(key);

        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–Ω—è—Ç–∞ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (lockTimestamp && now - lockTimestamp > 5 * 60 * 1000) {
            await logToFile(`[WARN] –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.`);
            context.pagesBusy.delete(key);
        }

        // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è
        while (context.pagesBusy.has(key)) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å timestamp
        context.pagesBusy.set(key, Date.now());

        try {
            return await callback();
        } finally {
            context.pagesBusy.delete(key);
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
    context.pagesQueue.set(key, task.catch(() => {}));
    return task;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ª–∏–¥–∞, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ—ë –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
 *
 * @param {string|number} account_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string|number} lead_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
 * @returns {Promise<import('puppeteer').Page>} - –°–æ–∑–¥–∞–Ω–Ω–∞—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
 */
async function createNewPage(account_id, lead_id) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    let accountContext = await getContext(account_id);

    let page;
    try {
        page = await accountContext.context.newPage();
    } catch (err) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${err.message}`);
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        accountContext.context = getBrowser();
        accountContext.pagesMap = new Map();
        accountContext.pageTimeouts = new Map();
        accountContext.pagesBusy = new Map();
        await updateContext(account_id);
        page = await accountContext.context.newPage();
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!page || page.isClosed()) {
        await logToFile(`[WARN] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è ${account_id} –∑–∞–∫—Ä—ã—Ç–∞. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º...`);
        page = await accountContext.context.newPage();
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
        await page.goto("about:blank", { waitUntil: "networkidle2", timeout: 15000 });
    } catch (err) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${err.message}`);
        page = await accountContext.context.newPage();
        await page.goto("about:blank", { waitUntil: "networkidle2", timeout: 15000 });
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (User-Agent, Interception –∏ —Ç.–¥.)
    await configurePage(page);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    const key = `${account_id}:${lead_id}`;
    accountContext.pagesMap.set(key, "about:blank");
    accountContext.pagesMap.set(`${key}_targetId`, page.target()._targetId);
    accountContext.pagesBusy.set(key, false);
    resetPageTimeout(account_id, lead_id, page);
    await updateContext(account_id);

    return page;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ª–∏–¥–∞.
 * –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë; –∏–Ω–∞—á–µ ‚Äì —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é.
 *
 * @param {string} base_url - –ë–∞–∑–æ–≤—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ª–∏–¥—É.
 * @param {string|number} account_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string|number} lead_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
 * @returns {Promise<{ page: import('puppeteer').Page, isNew: boolean }>} -
 */
async function getPage(base_url, account_id, lead_id, expiry = -1) {
    const accountContext = await getContext(account_id);
    const pagesMap = accountContext.pagesMap;
    const pageTimeouts = accountContext.pageTimeouts;
    const pagesBusy = accountContext.pagesBusy;
    const pagesLocks = accountContext.pagesLocks;
    const pagesQueue = accountContext.pagesQueue;
    const key = `${account_id}:${lead_id}`;
    let isNew = false;
    let page = await getPageByKey(account_id, key);

    if (page) {
        await logToFile(`[DEBUG] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${key}: ${page.url()}`);
        try {
            if (page.isClosed()) throw new Error("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞");
            const isReady = await page.evaluate(() => document.readyState === 'complete');
            if (isReady) {
                await logToFile(`–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è ${key}`);
                const cookiesLoaded = await loadCookies(account_id, page);
                if (cookiesLoaded) {
                    await logToFile(`–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${key}`);
                }
                if (pageTimeouts.has(key)) {
                    clearTimeout(pageTimeouts.get(key));
                    pageTimeouts.delete(key);
                }
                resetPageTimeout(account_id, lead_id, page);
                const authExists = await isAuthPage(page);
                if (authExists) {
                    await logToFile(`[WARN]: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${key}`);
                    await page.close();
                    pagesMap.delete(key);
                    pagesMap.delete(`${key}_targetId`);
                    pageTimeouts.delete(key);
                    pagesBusy.delete(key);
                    pagesLocks.delete(key);
                    pagesQueue.delete(key);
                    page = null;
                } else {
                    return { page, isNew: false };
                }
            }
        } catch (err) {
            await logToFile(`[WARN]: –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é. –û—à–∏–±–∫–∞: ${err.message}`);
        }
    } else {
        await logToFile(`[DEBUG] –ö–ª—é—á ${key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ pagesMap, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`);
    }

    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é
    if (pagesMap.size >= MAX_PAGES_PER_ACCOUNT) {
        const oldestKey = pagesMap.keys().next().value;
        let oldestPage = await getPageByKey(account_id, oldestKey);
        if (oldestPage) {
            await logToFile(`–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${oldestKey} —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—É–∫`);
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            await setAuthCookies(account_id, oldestPage, access_token, refresh_token, expiry);
            await saveCookies(account_id, oldestPage, expiry);
            resetPageTimeout(account_id, lead_id, oldestPage);
            return { page: oldestPage, isNew: false };
        } else {
            pagesMap.delete(key);
            pagesMap.delete(`${key}_targetId`);
            pageTimeouts.delete(key);
            pagesBusy.delete(key);
            pagesLocks.delete(key);
            pagesQueue.delete(key);
        }
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–≥–æ–¥–Ω–∞ ‚Äì —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    await logToFile(`–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è ${key}`);
    page = await createNewPage(account_id, lead_id);
    const leadUrl = `${base_url}/leads/detail/${lead_id}`;
    await page.goto(leadUrl, { waitUntil: 'domcontentloaded' });
    pagesMap.set(key, leadUrl);
    pagesMap.set(`${key}_targetId`, page.target()._targetId);
    isNew = true;

    const cookiesLoaded = await loadCookies(account_id, page);
    if (cookiesLoaded) {
        await logToFile(`–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${key}`);
    }
    const authExists = await isAuthPage(page);
    if (!authExists) {
        isNew = false;
    }
    resetPageTimeout(account_id, lead_id, page);
    await updateContext(account_id);

    return { page, isNew };
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç userAgent, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–µ—à –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç webdriver.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @returns {Promise<void>}
 */
async function configurePage(page) {
    page.on('error', async (err) => await logToFile('[Puppeteer] Error:', err));
    await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36");
    await page.setRequestInterception(true);
    await page.setBypassCSP(true);
    await page.setCacheEnabled(false);
    await page.evaluateOnNewDocument(() => {
        Object.defineProperty(navigator, 'webdriver', { get: () => false });
    });
    page.on("request", request => {
        const url = request.url();
        const resourceType = request.resourceType();
        if (["image", "svg", "media", "audio", "font"].includes(resourceType) || url.startsWith("data:image")) {
            // await logToFile(`[BLOCKED] ${url.substr(0, 100)}`);
            request.abort();
        } else {
            request.continue();
        }
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –∫–ª—é—á—É –∏–∑ –∫–∞—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} key - –ö–ª—é—á —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 * @returns {Promise<import('puppeteer').Page | null>} - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ `null`, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
 */
async function getPageByKey(account_id, key) {
    const accountContext = await getContext(account_id);
    if (!accountContext) {
        await logToFile(`[ERROR] –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId ${account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
    }

    if (!accountContext.context) {
        await logToFile(`[ERROR] –ö–æ–Ω—Ç–µ–∫—Å—Ç Puppeteer –¥–ª—è accountId ${account_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        return null;
    }

    const storedUrl = accountContext.pagesMap.get(key);
    if (!storedUrl) return null;

    await logToFile(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –∫–ª—é—á—É ${key}...`);
    const pages = await accountContext.context.pages();
    return pages.find(p => normalizeUrl(p.url()) === normalizeUrl(storedUrl)) || null;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} lead_id - ID –ª–∏–¥–∞.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @returns {Promise<void>}
 */
async function resetPageTimeout(account_id, lead_id, page) {
    const accountContext = await getContext(account_id);
    const key = `${account_id}:${lead_id}`;

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
    accountContext.pageTimers ||= new Map();
    accountContext.pageTimeouts ||= new Map();
    accountContext.pagesMap ||= new Map();
    accountContext.pagesBusy ||= new Map();
    accountContext.pagesLocks ||= new Map();
    accountContext.pagesQueue ||= new Map();

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (accountContext.pageTimers.has(key)) {
        clearTimeout(accountContext.pageTimers.get(key));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
    const timeout = setTimeout(async () => {
        await logToFile(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${key}...`);

        try {
            const pages = await getBrowser().pages();
            if (pages.length <= 1) {
                await logToFile(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} - –ø–æ—Å–ª–µ–¥–Ω—è—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º.`);
                return;
            }

            await logToFile(`–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${key} –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
            if (!page.isClosed()) {
                await page.close();
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            accountContext.pagesMap.delete(key);
            accountContext.pagesMap.delete(`${key}_targetId`);
            accountContext.pageTimers.delete(key);
            accountContext.pageTimeouts.delete(key);
            accountContext.pagesBusy.delete(key);
            accountContext.pagesLocks.delete(key);
            accountContext.pagesQueue.delete(key);

            // –û–±–Ω–æ–≤–ª—è–µ–º Redis —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (accountContext.pagesMap.size > 0 || accountContext.pageTimeouts.size > 0) {
                await saveContext(`ctx:${account_id}`, accountContext);
            } else {
                await redisClient.del(`ctx:${account_id}`);
            }

        } catch (err) {
            await logToFile(`[ERROR]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${key}: ${err.message}`);
        }
    }, 5 * 60 * 1000);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    accountContext.pageTimers.set(key, timeout);
    accountContext.pageTimeouts.set(key, Date.now() + 5 * 60 * 1000);
    await saveContext(`ctx:${account_id}`, accountContext);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
 */
setInterval(async () => {
    const now = Date.now();
    const allContextIds = Object.keys(contextStore);

    for (const account_id of allContextIds) {
        // –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        if (allContextIds.length <= 1) {
            await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º, –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ.`);
            continue;
        }

        if (now - contextStore[account_id].timestamp > 30 * 60 * 1000) {
            await logToFile(`–£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç)`);

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã—Ç—å
                const context = contextStore[account_id];
                if (context) {
                    await context.context.close();
                    await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} –∑–∞–∫—Ä—ã—Ç`);
                    await clearContext(account_id);
                } else {
                    await logToFile(`[WARN] –ö–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            } catch (err) {
                await logToFile(`[ERROR]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ${account_id}: ${err.message}`);
            }
        }
    }
}, 5 * 60 * 1000);

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç.
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã.
 */
setInterval(async () => {
    if (!getBrowser()) return;

    await logToFile("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç...");

    await closeInactivePages();
    await restartPagesForAccounts();

}, 15 * 60 * 1000); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–Ω—è—Ç—ã.
 */
async function closeInactivePages() {
    try {
        for (const account_id of Object.keys(contextStore)) {
            const context = contextStore[account_id];
            if (!context.pagesMap) continue;

            const now = Date.now();

            for (const key of context.pagesMap.keys()) {
                if (key.endsWith("_targetId")) {
                    await logToFile(`‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á: ${key}`);
                    continue;
                }

                const lastBusyTimestamp = context.pagesBusy.get(key);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
                if (lastBusyTimestamp && now - lastBusyTimestamp > 5 * 60 * 1000) {
                    await logToFile(`üõë –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${key}, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç.`);
                    context.pagesMap.delete(key);
                    context.pagesBusy.delete(key);
                    context.pagesLocks.delete(key);
                    context.pagesQueue.delete(key);
                    continue;
                }

                try {
                    const lead_id = extractLeadId(key);
                    if (!lead_id) continue;

                    const page = await getPage(account_id, lead_id);
                    if (page && !page.isClosed()) {
                        await page.close();
                        await logToFile(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} –∑–∞–∫—Ä—ã—Ç–∞.`);
                    }
                } catch (err) {
                    await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${key}: ${err.message}`);
                }
            }
        }
    } catch (err) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: ${err.message}`);
    }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
 */
async function restartPagesForAccounts() {
    for (const account_id of Object.keys(contextStore)) {
        await logToFile(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è ${account_id}`);
        try {
            const savedContext = await loadContext(`ctx:${account_id}`);
            const savedPages = new Map(savedContext.pagesMap || []);
            const savedTimeouts = new Map(savedContext.pageTimeouts || []);

            for (const [key, url] of savedPages.entries()) {
                if (key.endsWith("_targetId") || !isValidUrl(url)) {
                    await logToFile(`[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è ${key}: ${url}`);
                    continue;
                }

                try {
                    const page = await getBrowser().newPage();
                    await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 15000 });

                    pagesMap.set(key, url);
                    pagesMap.set(`${key}_targetId`, page.target()._targetId);

                    if (savedTimeouts.has(key)) {
                        const lead_id = extractLeadId(key);
                        if (lead_id) resetPageTimeout(account_id, lead_id, page);
                    }

                    await logToFile(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
                } catch (err) {
                    await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}: ${err.message}`);
                }
            }

            contextStore[account_id] = {
                context: getBrowser(),
                pagesMap: new Map(),
                pageTimeouts: savedTimeouts,
                pagesBusy: new Map(),
                pagesLocks: new Map(),
                pagesQueue: new Map(),
                requestCount: 0,
                timestamp: Date.now(),
            };

            await saveContext(`ctx:${account_id}`, contextStore[account_id]);
            await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ${account_id} –æ–±–Ω–æ–≤–ª—ë–Ω`);
        } catch (err) {
            await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è ${account_id}: ${err.message}`);
        }
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç lead_id –∏–∑ –∫–ª—é—á–∞.
 * @param {string} key - –ö–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ "accountId_leadId".
 * @returns {string|null} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç lead_id –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω.
 */
function extractLeadId(key) {
    const keyParts = key.split("_");
    return keyParts.length >= 2 ? keyParts[1] : null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL.
 * @param {string} url - –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π URL.
 * @returns {boolean} - true, –µ—Å–ª–∏ URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.
 */
function isValidUrl(url) {
    return typeof url === 'string' && url.startsWith('http');
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É.
 * –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–∏—é –∏–∑ 2 –ø–æ–ø—ã—Ç–æ–∫. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–µ—Ä–∏—é –µ—â—ë 2 —Ä–∞–∑–∞.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @param {string} selector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–ª–∏–∫–Ω—É—Ç—å.
 * @param {number} [delay=1000] - –ó–∞–¥–µ—Ä–∂–∫–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö) –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function safeClick(page, selector, delay = 1000) {
    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    if (await attemptClick(page, selector, delay)) {
        return true;
    }
    await logToFile(`attemptClick: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ ${selector} —Å –ø–µ—Ä–≤–æ–π —Å–µ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
    try {
        await page.reload({ waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        return await attemptClick(page, selector, delay);
    } catch (reloadErr) {
        await logToFile(`attemptClick: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${reloadErr.message}`);
        return false;
    }
}

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
 * –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è, –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @param {string} selector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–ª–∏–∫–Ω—É—Ç—å.
 * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö) –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function attemptClick(page, selector, delay) {
    for (let attempt = 1; attempt <= 2; attempt++) {
        await page.screenshot({ path: `error_safeClick_${selector}_${attempt}.png` });
        try {
            await logToFile(`safeClick: –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∫–ª–∏–∫–∞ –ø–æ ${selector}`);
            // –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –∏ —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º
            await page.waitForSelector(selector, { visible: true, timeout: 5000 });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º –æ–±—ä–µ–∫—Ç–æ–º
            const isClickable = await page.evaluate((sel) => {
                const el = document.querySelector(sel);
                if (!el) return false;
                const { x, y, width, height } = el.getBoundingClientRect();
                const centerX = x + width / 2;
                const centerY = y + height / 2;
                const topEl = document.elementFromPoint(centerX, centerY);
                return el === topEl;
            }, selector);
            if (!isClickable) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º –æ–±—ä–µ–∫—Ç–æ–º`);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å
            await page.click(selector);
            await new Promise(resolve => setTimeout(resolve, delay));
            await logToFile(`safeClick: –ö–ª–∏–∫ –ø–æ ${selector} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            return true;
        } catch (err) {
            await logToFile(`safeClick: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ ${selector}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}: ${err.message}`);
            await page.screenshot({ path: `error_safeClick_${selector}_${attempt}.png` });
            await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
        }
    }
    return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @returns {Promise<boolean>} - `true`, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏–Ω–∞—á–µ `false`.
 */
async function isAuthPage(page) {
    return await Promise.race([
        page.$$('#authentication').then(el => el.length > 0),
        new Promise(resolve => setTimeout(() => resolve(false), 5000))
    ]);
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @param {string} access_token - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
 * @param {string} refresh_token - –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @param {number} expiry - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (timestamp).
 * @returns {Promise<void>}
 */
async function setAuthCookies(account_id, page, access_token, refresh_token, expiry) {
    const domain = 'amocrm.ru';
    try {
        await page.setCookie(
            { name: 'access_token', value: access_token, domain: `.${domain}`, secure: true, expires: expiry },
            { name: 'refresh_token', value: refresh_token, domain: `.${domain}`, secure: true, expires: expiry }
        );
        await logToFile(`–ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain}`);
    } catch (error) {
        await logToFile(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫: ${error.message}`);
    }
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} lead_id - ID –ª–∏–¥–∞.
 * @param {string} base_url - –ë–∞–∑–æ–≤—ã–π URL.
 * @returns {Promise<void>}
 */
async function navigateToLead(page, account_id, lead_id, base_url) {
    try {
        const targetUrl = `${base_url}/leads/detail/${lead_id}`;
        await logToFile(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª–∏–¥–∞–º: ${targetUrl}`);

        const [response] = await Promise.all([
            page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 15000 }), // networkidle2
            page.goto(targetUrl, { waitUntil: 'load', timeout: 15000 })
        ]);

        const currentUrl = await page.url();
        await logToFile(`–ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ pagesMap
        const accountContext = await getContext(account_id);
        if (accountContext.pagesMap) {
            accountContext.pagesMap.set(`${account_id}:${lead_id}`, currentUrl);
            await updateContext(account_id);
        }
    } catch (error) {
        await logToFile(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ª–∏–¥–∞–º: ${error.message}`);
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É–∫–∏,
 * –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @param {string|number} account_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} access_token - –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
 * @param {string} refresh_token - –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @param {number} expiry - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏).
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ false.
 */
async function handleAuthorization(page, account_id, access_token, refresh_token, expiry) {
    if (!(await loadCookies(account_id, page))) {
        await setAuthCookies(account_id, page, access_token, refresh_token, expiry);
        await saveCookies(account_id, page, expiry);
        await page.reload({ waitUntil: 'networkidle2' });
        await logToFile(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫`);
    }

    if (await isAuthPage(page)) {
        await setAuthCookies(account_id, page, access_token, refresh_token, expiry);
        await saveCookies(account_id, page, expiry);
        await page.reload({ waitUntil: 'networkidle2' });

        if (await isAuthPage(page)) {
            await logToFile(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥`);
            return false;
        }
    }
    return true;
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, –∏–Ω–∞—á–µ false.
 */
async function navigateToChat(page) {
    const isNotesVisible = await page.evaluate(() => document.querySelector(".notes-wrapper") !== null);
    await logToFile(`notes-wrapper –≤–∏–¥–µ–Ω: ${isNotesVisible}`);
    await new Promise(resolve => setTimeout(resolve, 500));

    const switcherText = await page.evaluate(sel => {
        const el = document.querySelector(sel);
        return el ? el.innerText.trim() : "";
    }, '.feed-compose-switcher');

    if (switcherText !== "–ß–∞—Ç") {
        await new Promise(resolve => setTimeout(resolve, 5000));

        if (!(await safeClick(page, '.feed-compose-switcher', 15000))) {
            return false;
        }

        await logToFile(`–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞`);
        await page.waitForSelector('[data-id="chat"]', { timeout: 15000 });

        if (!(await safeClick(page, '[data-id="chat"]', 15000))) {
            return false;
        }
    }
    return true;
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à–µ –∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º, –∫–ª–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @param {string|number} account_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string|number} lead_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function selectRecipient(page, account_id, lead_id) {
    const userSelector = '.feed-compose-user__name';
    const recipientSelector = '.multisuggest__suggest-item';
    const cacheKey = `username:${account_id}:${lead_id}`;

    await logToFile(`–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    const userElement = await page.waitForSelector(userSelector, { timeout: 15000 }).catch(() => null);
    if (!userElement) {
        await logToFile(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: ${userSelector}`);
        return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userText = await page.$eval(userSelector, el => el.innerText.trim());
    const cachedUsername = await getUsername(account_id, lead_id);
    if (cachedUsername && cachedUsername === userText) {
        await logToFile(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω.`);
        return true;
    }

    // –ï—Å–ª–∏ –∏–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!(await safeClick(page, userSelector, 15000))) {
        return false;
    }

    await logToFile(`–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è`);
    const recipientElement = await page.waitForSelector(recipientSelector, { timeout: 15000 }).catch(() => null);
    if (!recipientElement) {
        await logToFile(`–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${recipientSelector}`);
        return false;
    }
    if (!(await safeClick(page, recipientSelector, 15000))) {
        return false;
    }

    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
    const selectedUser = await page.$eval(userSelector, el => el.innerText.trim());
    await saveUsername(account_id, lead_id, selectedUser);
    await logToFile(`–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${selectedUser}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à–µ —Å –∫–ª—é—á–æ–º ${cacheKey}`);

    return true;
}

/**
 * –í–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ div[contenteditable="true"] –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
 *
 * @param {import('puppeteer').Page} page - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer.
 * @param {string} message_text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
 * @returns {Promise<boolean>} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function sendMessage(page, message_text) {
    await logToFile(`–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è`);

    const success = await page.evaluate(async (message_text) => {
        const inputSelector = '.feed-compose__message';
        const buttonSelector = '.feed-note__button';

        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputField = document.querySelector(inputSelector);
        if (!inputField) {
            await logToFile(`–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${inputSelector}`);
            return false;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ click, —Ç–∞–∫ –∫–∞–∫ focus –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
        inputField.click();

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (—á–µ—Ä–µ–∑ selection + delete)
        const range = document.createRange();
        range.selectNodeContents(inputField);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        document.execCommand('delete');

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é insertText
        document.execCommand('insertText', false, message_text);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª—Å—è
        if (inputField.innerText.trim() !== message_text) {
            await logToFile(`–¢–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
            return false;
        }

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
        const sendButton = document.querySelector(buttonSelector);
        if (!sendButton) {
            await logToFile(`–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${buttonSelector}`);
            return false;
        }
        sendButton.scrollIntoView({ behavior: "smooth", block: "center" });

        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
        sendButton.click();
        return true;
    }, message_text);

    if (!success) {
        await logToFile(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        return false;
    }

    await logToFile(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    return true;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
 *
 * @param {string|number} account_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<void>}
 */
async function updateRequestCount(account_id) {
    if (contextStore[account_id]) {
        contextStore[account_id].requestCount = (contextStore[account_id].requestCount || 0) + 1;
        await saveContext(`ctx:${account_id}`, contextStore[account_id]);
        await logToFile(`–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${account_id}: ${contextStore[account_id].requestCount}`);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.
 * @route GET /health
 * @param {Request} req - –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Response} res - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–≤–µ—Ç–∞.
 * @returns {void}
 */
app.get('/health', async (req, res) => {
    await logToFile(`health - OK`);
    res.status(200).send('OK');
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏–¥.
 * @route POST /send-lead-message
 * @param {Request} req - –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—Ä–æ—Å–∞.
 * @param {Response} res - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–≤–µ—Ç–∞.
 * @returns {Promise<Response>} - –û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏.
 */
app.post('/send-lead-message', async (req, res) => {
    const startTime = Date.now();

    if (!req.body.data) {
        return res.status(400).json({ error: 'Missing data' });
    }

    const decryptedData = decryptData(req.body.data, process.env.ENCRYPTION_KEY);
    await logToFile(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.`);

    if (!decryptedData) {
        return res.status(400).json({ error: 'Error decryption' });
    }
    const { account_id, base_url, access_token, refresh_token, lead_id, message_text, expiry } = decryptedData;
    await logToFile(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.`);
    if (!account_id || !base_url || !access_token || !refresh_token || !lead_id || !message_text || !expiry) {
        return res.status(400).json({ error: 'Missing required parameters' });
    }
    await logToFile(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ.`);

    if (!getBrowser()) {
        await logToFile(`–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...`);
        await launchBrowser(false, account_id);
    }
    if (!getBrowser()) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä");
    }

    var status, message;
    try {
        const result = await withPageLock(account_id, lead_id, async () =>
            withRetries(() => sendLeadMessage({
                account_id, base_url, access_token, refresh_token, lead_id, message_text, expiry
            }))
        );
        var { status, message } = result;
    } catch (error) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        var status = 500;
        var message = { error: "Failed to send message after retries" };
    }

    const totalTime = Date.now() - startTime;
    await logToFile(`[DEBUG] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime} –º—Å`);
    return res.status(status).json(message);
});

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Puppeteer-—Å–µ—Ä–≤–∏—Å–∞.
 * @constant {number} PORT - –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞.
 * @returns {Promise<void>}
 */
app.listen(PORT, '0.0.0.0', async () => {
    await logToFile(`Puppeteer service running on port ${PORT}`)
});

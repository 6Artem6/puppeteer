import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import { createClient } from "redis";
import dotenv from "dotenv";
import { promises as dns } from "dns";
import { logToFile } from './logger.mjs';
import { mapsEqual } from './utils.mjs';
import { encryptAndCompress, decryptAndDecompress } from './cryptoUtils.mjs';

export {
    createClient
}

let browser = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer

export function getBrowser() {
    return browser;
}

export function setBrowser(instance) {
    browser = instance;
}


// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();


const MAX_CONTEXTS = 5;
const MAX_REQUEST_COUNT = 10;
const contextStore = {};

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç
const REDIS_HOST = process.env.REDIS_HOST || 'redis';
const REDIS_PORT = process.env.REDIS_PORT || 6379;
const redisClient = createClient({
    url: `redis://${REDIS_HOST}:${REDIS_PORT}`
});

puppeteer.use(StealthPlugin()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≥–∏–Ω Stealth –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤

// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (IIFE) –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
(async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç Redis
        if (!redisClient.isOpen) {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            await redisClient.connect().catch(console.error);
        }
        await logToFile("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis");
    } catch (err) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await logToFile("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:", err);
    }
})();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Redis
redisClient.on("connect", async () => await logToFile("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis"));
redisClient.on("error", async (err) => await logToFile("‚ùå –û—à–∏–±–∫–∞ Redis:", err));

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞.
 * @param {boolean} [force=false] - –ï—Å–ª–∏ `true`, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä.
 * @returns {Promise<import('puppeteer').Browser>} - –ó–∞–ø—É—â–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä.
 */
async function launchBrowserCreate(force = false) {
    const profilePath = path.join(__dirname, "profile");
    if (!browser || force) {
        try {
            await logToFile(`–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ ${profilePath}`);
            browser = await puppeteer.launch({
                headless: "new",
                timeout: 60000,
                protocolTimeout: 180000,
                args: [
                    `--user-data-dir=${profilePath}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è
                    "--no-sandbox",
                    "--disable-setuid-sandbox",
                    "--disable-dev-shm-usage",
                    "--disable-gpu",
                    "--disable-accelerated-2d-canvas",
                    "--disable-webgl",
                    "--disable-software-rasterizer",
                    "--disable-background-networking",
                    "--disable-default-apps",
                    "--disable-extensions",
                    "--disable-features=site-per-process",
                    "--no-first-run",
                    "--mute-audio",
                    "--no-zygote",
                    "--enable-low-res-tiles",
                    "--disable-sync",
                    "--disable-background-timer-throttling",
                    "--disable-backgrounding-occluded-windows",
                    "--disable-breakpad",
                    "--disable-component-extensions-with-background-pages",
                    "--disable-features=TranslateUI,BlinkGenPropertyTrees",
                    "--disable-ipc-flooding-protection",
                    "--disable-renderer-backgrounding",
                    "--enable-features=NetworkService,NetworkServiceInProcess",
                    "--force-color-profile=srgb",
                    "--hide-scrollbars",
                    "--metrics-recording-only",
                    "--no-pings",
                    "--password-store=basic",
                    "--use-mock-keychain",
                    '--memory-pressure-off',
                    '--max-old-space-size=4096',
                ],
            });
            await logToFile(`–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
        } catch (error) {
            await logToFile(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
        }
    }
    return browser;
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É –∏ —Å–æ–∑–¥–∞—ë—Ç –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 *
 * @param {boolean} [force=false] - –ï—Å–ª–∏ true, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É.
 * @param {string|null} [accountId=null] - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<import('puppeteer-core').BrowserContext>} - –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 */
async function launchBrowser(force = false, accountId = null) {
    if (browser && !force) return browser;

    await logToFile(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è accountId: ${accountId}`);

    if (!process.env.BROWSER_HOST) {
        throw new Error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BROWSER_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ Redis (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        const sessionId = await getSession(accountId);
        const headers = { "X-Session-ID": sessionId || "", "Host": "localhost" };

        // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å browser-service –∏–∑ Redis
        let ip = await getBrowserServiceIP();
        if (!ip) {
            await logToFile("‚Ñπ IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis. –ó–∞–ø—É—Å–∫–∞–µ–º resolveAndSave...");
            ip = await resolveAndSave(process.env.BROWSER_HOST);
            if (!ip) throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ resolveAndSave");
        }

        const url = `http://${ip}:9222/json/version`;
        await logToFile(`üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${url}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º fetch —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º DNS –∫–∞–∂–¥—ã–µ 2 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        const maxAttempts = 10;
        const delay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        let fetchAttempts = 0;
        let response;

        while (fetchAttempts < maxAttempts) {
            try {
                response = await fetch(url, { headers });
                if (response.ok) {
                    break;
                }
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);
            } catch (err) {
                fetchAttempts++;
                await logToFile(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ browser-service (–ø–æ–ø—ã—Ç–∫–∞ ${fetchAttempts}): ${err.message}`);

                // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ç–Ω–∞—è (–∫–∞–∂–¥–∞—è –≤—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞) ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–∑–æ–ª–≤–∏–º –∏–º—è
                if (fetchAttempts > 2) {
                    await logToFile("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ nslookup...");
                    ip = await resolveAndSave(process.env.BROWSER_HOST);
                    if (!ip) {
                        await logToFile("‚ùå resolveAndSave –Ω–µ –≤–µ—Ä–Ω—É–ª IP");
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ IP
                        await logToFile(`‚úÖ –ù–æ–≤—ã–π IP: ${ip}`);
                    }
                }

                if (fetchAttempts >= maxAttempts) {
                    throw err;
                }
                await logToFile(`üîÅ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π sessionId ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        const newSessionId = response.headers.get("X-Session-ID");
        await logToFile(`‚úÖ newSessionId: ${newSessionId}`);

        if (newSessionId && newSessionId !== sessionId) {
            await logToFile(`‚úÖ saveSession: ${accountId} - ${newSessionId}`);
            await saveSession(accountId, newSessionId);
        }

        const { webSocketDebuggerUrl: endpoint } = await response.json();
        if (!endpoint) {
            throw new Error("browser-service –Ω–µ –≤–µ—Ä–Ω—É–ª WebSocket URL");
        }

        await logToFile(`‚úÖ –ü–æ–ª—É—á–µ–Ω WebSocket URL: ${endpoint}`);

        return await connectWithRetries(endpoint);
    } catch (error) {
        await logToFile(`‚ùå –û—à–∏–±–∫–∞ launchBrowser: ${error.message}`);
        throw error;
    }
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É Puppeteer —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
 * @async
 * @function
 * @param {string} endpoint - WebSocket URL –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer.
 * @param {number} [maxAttempts=10] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 * @param {number} [delay=2000] - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
 * @returns {Promise<import('puppeteer').Browser>} - –û–±—ä–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer.
 * @throws {Error} –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å.
 */
async function connectWithRetries(endpoint, maxAttempts = 10, delay = 2000) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            await logToFile(`üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempt}/${maxAttempts}...`);

            browser = await puppeteer.connect({
                browserWSEndpoint: endpoint,
                defaultViewport: null,
                headless: "new",
                timeout: 60000,
                protocolTimeout: 180000
            });

            await logToFile("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–∞—É–∑–µ—Ä—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            return browser;
        } catch (error) {
            await logToFile(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
            if (attempt === maxAttempts) {
                await logToFile("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.");
                throw error;
            }
            await logToFile(`üîÅ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫...`);
            await new Promise(res => setTimeout(res, delay));
        }
    }
}

/**
 * –†–µ–∑–æ–ª–≤–∏—Ç IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ Redis.
 * @async
 * @function
 * @param {string} serviceName - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ–∑–æ–ª–≤–∏—Ç—å.
 * @returns {Promise<string|null>} - IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ `null`, –µ—Å–ª–∏ —Ä–µ–∑–æ–ª–≤ –Ω–µ —É–¥–∞–ª—Å—è.
 */
async function resolveAndSave(serviceName) {
    try {
        await logToFile(`üîç –†–µ–∑–æ–ª–≤–∏–º ${serviceName}...`);

        const addresses = await dns.lookup(serviceName, { all: true });
        if (!addresses.length) throw new Error("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");

        const ip = addresses[0].address;
        await logToFile(`‚úÖ IP-–∞–¥—Ä–µ—Å ${serviceName}: ${ip}`);

        await redisClient.set(`browser-service-ip`, ip);
        await logToFile(`üíæ IP —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis: ${ip}`);

        return ip;
    } catch (error) {
        await logToFile(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–æ–ª–≤–∞ ${serviceName}: ${error.message}`);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç IP-–∞–¥—Ä–µ—Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ Redis.
 * @async
 * @function
 * @returns {Promise<string|null>} - IP-–∞–¥—Ä–µ—Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ `null`, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.
 */
async function getBrowserServiceIP() {
    return await redisClient.get("browser-service-ip");
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<{
 *  context: import('puppeteer').BrowserContext,
 *  pagesMap: Map<string, string>,
 *  pageTimeouts: Map<string, NodeJS.Timeout>, timestamp: number,
 *  pagesBusy: Map<string, string>,
 *  pagesLocks: Map<string, string>,
 *  pagesQueue: Map<string, string>,
 *  requestCount: number
 * }>} - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.
 */
async function getContext(accountId) {
    const contextId = `ctx:${accountId}`;

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
    if (Object.keys(contextStore).length >= MAX_CONTEXTS) {
        const oldestAccountId = Object.entries(contextStore)
            .sort(([, a], [, b]) => a.timestamp - b.timestamp)[0][0]; // –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        await logToFile(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (${MAX_CONTEXTS}). –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${oldestAccountId}`);

        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
            for (const page of contextStore[oldestAccountId].pagesMap.values()) {
                if (page && !page.isClosed()) {
                    await page.close();
                }
            }
            delete contextStore[oldestAccountId];
            await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç ${oldestAccountId} –æ—á–∏—â–µ–Ω`);
        } catch (err) {
            await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ${oldestAccountId}: ${err.message}`);
        }
    }

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (contextStore[accountId]) {
        const contextData = contextStore[accountId];
        await logToFile(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId}. –ó–∞–ø—Ä–æ—Å–æ–≤: ${contextData.requestCount}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (contextData.requestCount >= MAX_REQUEST_COUNT) {
            await logToFile(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ${accountId}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
            try {
                const allPages = await getBrowser().pages(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                for (const [key, url] of contextData.pagesMap.entries()) {
                    if (key.endsWith("_targetId")) continue;

                    const page = allPages.find(p => p.url() === url); // –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL
                    if (page) {
                        await page.close();
                        await logToFile(`–ó–∞–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${url}`);
                    }
                }
                contextData.pagesMap = new Map(); // –û—á–∏—â–∞–µ–º Map
                contextData.timestamp = Date.now();
                contextData.pagesBusy = new Map(); // –û—á–∏—â–∞–µ–º Map –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
                contextData.pagesLocks = new Map(); // –û—á–∏—â–∞–µ–º Map –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
                contextData.pagesQueue = new Map(); // –û—á–∏—â–∞–µ–º Map –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
                contextData.requestCount = 0;
                await saveContext(contextId, contextData);
            } catch (err) {
                await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è ${accountId}: ${err.message}`);
            }
        }
        return contextData;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let contextData = await loadContext(contextId);
    if (contextData) {
        await logToFile(`–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId} —Å key: ${contextId}`);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pagesMap –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ pagesMap —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤)
        const restoredPagesMap = new Map(contextData.pagesMap || []);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü)
        for (const [key, url] of restoredPagesMap.entries()) {
            if (key.endsWith("_targetId")) continue;
            await logToFile(`[DEBUG] –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${key} –¥–ª—è URL: ${url}`);
            try {
                const page = await getBrowser().newPage();
                await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });
                // –û–±–Ω–æ–≤–ª—è–µ–º restoredPagesMap –¥–ª—è targetId
                restoredPagesMap.set(`${key}_targetId`, page.target()._targetId);
            } catch (err) {
                await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${key}: ${err.message}`);
            }
        }
        contextData.pagesMap = restoredPagesMap;

        // –ï—Å–ª–∏ pagesBusy –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Map, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é Map
        if (!contextData.pagesBusy || !(contextData.pagesBusy instanceof Map)) {
            contextData.pagesBusy = new Map();
        }
        if (!contextData.pagesMap || !(contextData.pagesMap instanceof Map)) {
            contextData.pagesMap = new Map();
        }
        if (!contextData.pagesQueue || !(contextData.pagesQueue instanceof Map)) {
            contextData.pagesQueue = new Map();
        }

        contextStore[accountId] = contextData;
        await saveContext(contextId, contextData);
        return contextData;
    }

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    await logToFile(`[DEBUG] –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId}`);
    contextData = {
        context: getBrowser(),
        pagesMap: new Map(),
        pageTimeouts: new Map(),
        pagesBusy: new Map(),
        pagesLocks: new Map(),
        pagesQueue: new Map(),
        timestamp: Date.now(),
        requestCount: 0
    };

    contextStore[accountId] = contextData;
    await saveContext(contextId, contextData);
    await logToFile(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId} —Å key: ${contextId}`);
    return contextData;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis.
 * @param {string} contextId - ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
 * @returns {Promise<void>} - –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
 */
async function saveContext(contextId, newContextData) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let existingData = await loadContext(contextId);

        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (!existingData) {
            existingData = {
                pagesMap: new Map(),
                pageTimeouts: new Map(),
                pagesBusy: new Map(),
                pagesLocks: new Map(),
                pagesQueue: new Map(),
                requestCount: 0,
                timestamp: Date.now()
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let contextChanged = false;
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º pagesMap, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (!mapsEqual(existingData.pagesMap, newContextData.pagesMap)) {
            existingData.pagesMap = new Map(newContextData.pagesMap);
            contextChanged = true;
        }
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º pageTimeouts, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (!mapsEqual(existingData.pageTimeouts, newContextData.pageTimeouts)) {
            existingData.pageTimeouts = new Map(newContextData.pageTimeouts);
            contextChanged = true;
        }
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º pagesBusy, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (!mapsEqual(existingData.pagesBusy, newContextData.pagesBusy)) {
            existingData.pagesBusy = new Map(newContextData.pagesBusy);
            contextChanged = true;
        }
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º pagesLocks, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (!mapsEqual(existingData.pagesLocks, newContextData.pagesLocks)) {
            existingData.pagesLocks = new Map(newContextData.pagesLocks);
            contextChanged = true;
        }
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º pagesQueue, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (!mapsEqual(existingData.pagesQueue, newContextData.pagesQueue)) {
            existingData.pagesQueue = new Map(newContextData.pagesQueue);
            contextChanged = true;
        }
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º timestamp
        if (existingData.requestCount !== newContextData.requestCount) {
            existingData.requestCount = newContextData.requestCount;
            contextChanged = true;
        }
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º timestamp
        if (existingData.timestamp !== newContextData.timestamp) {
            existingData.timestamp = newContextData.timestamp;
            contextChanged = true;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        if (!contextChanged) {
            await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ${contextId} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.`);
            return;
        }

        // –®–∏—Ñ—Ä—É–µ–º –∏ —Å–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const encryptedData = await encryptAndCompress({
            pagesMap: [...existingData.pagesMap],
            pageTimeouts: [...existingData.pageTimeouts],
            pagesBusy: [...existingData.pagesBusy],
            pagesLocks: [...existingData.pagesLocks],
            pagesQueue: [...existingData.pagesQueue],
            requestCount: existingData.requestCount,
            timestamp: existingData.timestamp,
        }, process.env.ENCRYPTION_KEY);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å TTL 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
        await redisClient.set(`context:${contextId}`, encryptedData, 'EX', 86400);

        await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis –¥–ª—è ${contextId}`);
    } catch (err) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è ${contextId}: ${err.message}`);
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis.
 * @param {string} contextId - ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
 * @returns {Promise<{
 *  pagesMap: Map<string, string>,
 *  pageTimeouts: Map<string, NodeJS.Timeout>,
 *  timestamp: number
 * } | null>} - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ `null`, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
 */
async function loadContext(contextId) {
    const key = `context:${contextId}`;
    const encryptedData = await redisClient.get(key);
    await logToFile('[DEBUG] –î–∞–Ω–Ω—ã–µ –∏–∑ Redis –¥–ª—è ' + key + ':', encryptedData);

    if (!encryptedData) {
        await logToFile(`[WARN] –ö–æ–Ω—Ç–µ–∫—Å—Ç ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis`);
        return null;
    }

    try {
        const parsedData = await decryptAndDecompress(encryptedData, process.env.ENCRYPTION_KEY);
        const restoredContext = {
            context: getBrowser(),
            pagesMap: new Map(Array.isArray(parsedData.pagesMap) ? parsedData.pagesMap : []),
            pageTimeouts: new Map(),
            pagesBusy: new Map(Array.isArray(parsedData.pagesBusy) ? parsedData.pagesBusy : []),
            pagesLocks: new Map(Array.isArray(parsedData.pagesLocks) ? parsedData.pagesLocks : []),
            pagesQueue: new Map(
                Array.isArray(parsedData.pagesQueue)
                ? parsedData.pagesQueue.map(([key, value]) => [key, value instanceof Promise ? value : Promise.resolve()])
                : []
            ),
            requestCount: typeof parsedData.requestCount === 'number' ? parsedData.requestCount : 0,
            timestamp: typeof parsedData.timestamp === 'number' ? parsedData.timestamp : Date.now(),
        };

        const now = Date.now();
        for (const [key, value] of Object.entries(parsedData.pageTimeouts || {})) {
            if (typeof value !== 'number') {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            }
            if (now >= value) {
                await logToFile(`–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${key}, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫`);
                restoredContext.pagesMap.delete(key);
            } else if (!restoredContext.pageTimeouts.has(key)) {
                restoredContext.pageTimeouts.set(
                    key,
                    setTimeout(async () => {
                        await logToFile(`–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${key} –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
                        restoredContext.pagesMap.delete(key);
                        restoredContext.pagesMap.delete(`${key}_targetId`);
                        restoredContext.pageTimeouts.delete(key);
                        restoredContext.pagesBusy.delete(key);
                        restoredContext.pagesLocks.delete(key);
                        restoredContext.pagesQueue.delete(key);
                        restoredContext.requestCount = 0;
                        await saveContext(contextId, restoredContext);
                    }, value - now)
                );
            }
        }
        return restoredContext;
    } catch (err) {
        await logToFile(`[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è ${key}:`, err);
        return null;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<void>}
 */
async function updateContext(accountId) {
    const contextId = `ctx:${accountId}`;

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –≤ –ø–∞–º—è—Ç–∏, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
    if (contextStore[accountId]) {
        await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å.`);
        return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis
    let loadedContext = await loadContext(contextId);

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if (!loadedContext) {
        await logToFile(`[WARN] –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è accountId: ${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis`);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç–∏
    contextStore[accountId] = loadedContext;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Redis
    await saveContext(contextId, loadedContext);
    await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Redis –¥–ª—è accountId: ${accountId}`);
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫—É–∫–∏ –∏ –ø—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ).
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<void>}
 */
async function clearContext(account_id) {
    if (!contextStore[account_id]) return;

    try {
        await logToFile(`–û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...`);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–∞–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        for (const [key, url] of contextStore[account_id].pagesMap.entries()) {
            try {
                const page = await getPageByKey(account_id, key);
                if (page) {
                    await page.close();
                    await logToFile(`–ó–∞–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${key} (${url})`);
                }
            } catch (err) {
                await logToFile(`[ERROR]: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${key}: ${err.message}`);
            }
        }

        // –û—á–∏—â–∞–µ–º, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        contextStore[account_id].pagesMap.clear();
        contextStore[account_id].pageTimeouts.clear();
        contextStore[account_id].timestamp = Date.now();
        contextStore[account_id].pagesBusy.clear();
        contextStore[account_id].pagesLocks.clear();
        contextStore[account_id].pagesQueue.clear();
        contextStore[account_id].requestCount = 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Redis
        await saveContext(`ctx:${account_id}`, contextStore[account_id]);

        await logToFile(`–ö–æ–Ω—Ç–µ–∫—Å—Ç ${account_id} –æ—á–∏—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`);
    } catch (err) {
        await logToFile(`[ERROR]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ${account_id}: ${err.message}`);
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Redis –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @param {number} expiry - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (timestamp).
 * @returns {Promise<void>}
 */
async function saveCookies(account_id, page, expiry) {
    try {
        const cookies = await page.cookies();
        const now = Math.floor(Date.now() / 1000);
        const diff = expiry - now;
        const ttl = diff > 0 ? diff : 1;

        const cookieData = { cookies, expiry };
        const encryptedData = await encryptAndCompress(cookieData, process.env.ENCRYPTION_KEY);

        await redisClient.set(`cookies:${account_id}`, encryptedData, 'EX', ttl);
        await logToFile(`–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis –¥–ª—è ${account_id} –Ω–∞ ${ttl} —Å–µ–∫—É–Ω–¥`);
    } catch (error) {
        await logToFile(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫ –≤ Redis –¥–ª—è ${account_id}: ${error.message}`);
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –∏–∑ Redis –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
 * @param {string} account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {import('puppeteer').Page} page - –≠–∫–∑–µ–º–ø–ª—è—Ä Puppeteer.
 * @returns {Promise<boolean>} - `true`, –µ—Å–ª–∏ –∫—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∞—á–µ `false`.
 */
async function loadCookies(account_id, page) {
    try {
        const encryptedData = await redisClient.get(`cookies:${account_id}`);
        if (!encryptedData) return false;

        const { cookies } = await decryptAndDecompress(encryptedData, process.env.ENCRYPTION_KEY);
        if (!Array.isArray(cookies) || cookies.length === 0) return false;

        for (const cookie of cookies) {
            try {
                await page.setCookie(cookie);
            } catch (err) {
                await logToFile(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫ –¥–ª—è ${account_id}: ${err.message}`);
            }
        }

        await logToFile(`–ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Redis –¥–ª—è ${account_id}`);
        return true;
    } catch (error) {
        await logToFile(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫ –∏–∑ Redis –¥–ª—è ${account_id}: ${error.message}`);
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç sessionId –∏–∑ Redis –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ accountId.
 * @param {string|number} accountId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @returns {Promise<string|null>} - sessionId –∏–ª–∏ null, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.
 */
async function getSession(accountId) {
    return await redisClient.get(`session:${accountId}`);
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç sessionId –≤ Redis –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ accountId.
 * @param {string|number} accountId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string} sessionId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 * @returns {Promise<void>}
 */
async function saveSession(accountId, sessionId) {
    await redisClient.set(`session:${accountId}`, sessionId, "EX", 60 * 60); // –•—Ä–∞–Ω–µ–Ω–∏–µ 1 —á–∞—Å
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis –ø–æ accountId –∏ leadId.
 * @param {string|number} accountId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string|number} leadId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
 * @returns {Promise<string|null>} - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
 */
async function getUsername(accountId, leadId) {
    return await redisClient.get(`username:${accountId}:${leadId}`);
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis –ø–æ accountId –∏ leadId.
 * @param {string|number} accountId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
 * @param {string|number} leadId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
 * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 * @returns {Promise<void>}
 */
async function saveUsername(accountId, leadId, username) {
    await redisClient.set(`username:${accountId}:${leadId}`, username);
}


export {
    getContext, saveContext, loadContext, updateContext, clearContext,
    saveCookies, loadCookies, redisClient, contextStore, launchBrowser,
    getUsername, saveUsername
};
